import { encode } from "../deps/std/encoding/hex.ts"
import * as path from "../deps/std/path.ts"
import dprintConfig from "../dprint.json" assert { type: "json" }

const tsFormatterPath = new URL("../util/formatter/md.ts", import.meta.url)
const currentPathname = path.relative(Deno.cwd(), new URL(import.meta.url).pathname)
const bytes = await fetch(
  dprintConfig.plugins.find((v) => v.startsWith("https://plugins.dprint.dev/markdown-"))!,
).then((r) => r.arrayBuffer())
const wasm = new TextDecoder().decode(encode(new Uint8Array(bytes)))
await Deno.writeTextFile(
  tsFormatterPath,
  `// This file was generated by \`${currentPathname}\`
import { createFromBuffer } from "../../deps/dprint.ts"
import dprintConfig from "../../dprint.json" assert { type: "json" }
import { decode } from "../../deps/std/encoding/hex.ts"

const wasm =
  "${wasm}"
export const formatter = createFromBuffer(decode(new TextEncoder().encode(wasm)))
const { indentWidth, lineWidth, markdown: config } = dprintConfig
formatter.setConfig({ indentWidth, lineWidth }, config)
`,
)
